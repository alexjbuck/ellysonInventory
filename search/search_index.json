{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Okay, This is a pretty disorganized set of notes at this point. Check the navigation bar for the \"Working With SharePoint JSON\" section. The general idea of the project is to create a tool that lets us visualize the People and Projects that we have in our organization. We discussed two views for projects, one that is a Overview and one that is a Detail . Right now these are called DefaultFormatted and DetailView respectively. Projects Projects have the fields from the STAIRS system. Most of these fields are not rendered in the UI as it is written, however. The overview shows the following fields ( if they exist ): Title Point of Contact (as a mailto:link) Secondary Point of Contact (as a mailto:link) Project Status (this maybe can go away, I'm not sure that the STAIRS project status field is relevant. Or we can move the STAIRS project status field to a STAIRS-project status and implement our own Project Status field.) Project Start Date Project End Date Project Description There is a button on each project that takes you to the detail view. You can manually switch views to the Detailed view, but it will not be filtered down to a single project. The button will change views and filter down to the single project. The Detail view adds in the Project Description field, which tends to be very long. I actually had to delete some of the description entries from the STAIRS export because weird formatting issues. Certain control characters were causing the single cell to paste into multiple cells when migrating the Excel data into SharePoint. Unfortunately, I couldn't figure out how to fix this. I also could not create the list from the Excel data; this is supposed to be an option per the documentation, but it was not an available option to me. People People are represented by a SharePoint person object and tags for their interests. Project-People Relationships I have implemented the basic list for this, which uses a lookup field on project titles and a person object to select the person. I have concluded there is no organic SharePoint way to implement the many-to-many relationship mapping with the People and Project lists. My current guess is that you can implement this with a PowerAutomate flow that runs whenever the Project-People join list is updated. Get the list of relationships. For each relationship: check if the project exists. (It should, the lookup field is configured to have referential integretiy and delete the relationship if the project is deleted.) If the project exists, check if the person exists. (People objects cannot be targets of lookup fields {because of course... :facepalm:}, so we have no guarantee that the person exists, i.e. no referential integrity.) If the person exists, go into the project list and append the person to the \"Interested People\" field. If the person exists, go into the person list and append the project to the \"Interested Projects\" field. If the person does not exists, delete the relationship entry. I have not implemented ANY of the PowerAutomate flow for this yet. Forms The SharePoint default form includes every field. This works for now, maybe isn't idea. Unfortunately you have to use PowerAutomate to customize these forms. PowerAutomate is NOT accessible from a non-NMCI connection, again, because why would it be? I was working well on my home computer and really did not want to pull out my work laptop... The general idea is to use what I did when demonstrating PowerAutomate update emails. This creates a link to an edit form for just the one project entry. Permissions I don't know anything about this yet. We'll need to lock things down somewhat to prevent people from messing with the data. References and Quicklinks Below are a few quick links to get you started. FRAG JSON Test site AI Project List AI Person List Person Project Join List (Experimental) JSON Formatter List Format Syntax Reference","title":"Getting Started"},{"location":"#getting-started","text":"Okay, This is a pretty disorganized set of notes at this point. Check the navigation bar for the \"Working With SharePoint JSON\" section. The general idea of the project is to create a tool that lets us visualize the People and Projects that we have in our organization. We discussed two views for projects, one that is a Overview and one that is a Detail . Right now these are called DefaultFormatted and DetailView respectively.","title":"Getting Started"},{"location":"#projects","text":"Projects have the fields from the STAIRS system. Most of these fields are not rendered in the UI as it is written, however. The overview shows the following fields ( if they exist ): Title Point of Contact (as a mailto:link) Secondary Point of Contact (as a mailto:link) Project Status (this maybe can go away, I'm not sure that the STAIRS project status field is relevant. Or we can move the STAIRS project status field to a STAIRS-project status and implement our own Project Status field.) Project Start Date Project End Date Project Description There is a button on each project that takes you to the detail view. You can manually switch views to the Detailed view, but it will not be filtered down to a single project. The button will change views and filter down to the single project. The Detail view adds in the Project Description field, which tends to be very long. I actually had to delete some of the description entries from the STAIRS export because weird formatting issues. Certain control characters were causing the single cell to paste into multiple cells when migrating the Excel data into SharePoint. Unfortunately, I couldn't figure out how to fix this. I also could not create the list from the Excel data; this is supposed to be an option per the documentation, but it was not an available option to me.","title":"Projects"},{"location":"#people","text":"People are represented by a SharePoint person object and tags for their interests.","title":"People"},{"location":"#project-people-relationships","text":"I have implemented the basic list for this, which uses a lookup field on project titles and a person object to select the person. I have concluded there is no organic SharePoint way to implement the many-to-many relationship mapping with the People and Project lists. My current guess is that you can implement this with a PowerAutomate flow that runs whenever the Project-People join list is updated. Get the list of relationships. For each relationship: check if the project exists. (It should, the lookup field is configured to have referential integretiy and delete the relationship if the project is deleted.) If the project exists, check if the person exists. (People objects cannot be targets of lookup fields {because of course... :facepalm:}, so we have no guarantee that the person exists, i.e. no referential integrity.) If the person exists, go into the project list and append the person to the \"Interested People\" field. If the person exists, go into the person list and append the project to the \"Interested Projects\" field. If the person does not exists, delete the relationship entry. I have not implemented ANY of the PowerAutomate flow for this yet.","title":"Project-People Relationships"},{"location":"#forms","text":"The SharePoint default form includes every field. This works for now, maybe isn't idea. Unfortunately you have to use PowerAutomate to customize these forms. PowerAutomate is NOT accessible from a non-NMCI connection, again, because why would it be? I was working well on my home computer and really did not want to pull out my work laptop... The general idea is to use what I did when demonstrating PowerAutomate update emails. This creates a link to an edit form for just the one project entry.","title":"Forms"},{"location":"#permissions","text":"I don't know anything about this yet. We'll need to lock things down somewhat to prevent people from messing with the data.","title":"Permissions"},{"location":"#references-and-quicklinks","text":"Below are a few quick links to get you started. FRAG JSON Test site AI Project List AI Person List Person Project Join List (Experimental) JSON Formatter List Format Syntax Reference","title":"References and Quicklinks"},{"location":"Importing%20Data/","text":"Importing data from STAIRS exports First off. Sorry, this is NOT going to be enjoyable. It would be cool if the \"Upload from Excel\" option from Sharepiont worked, or the \"Export Table to Sharepoint List\" option from Excel worked, or even the fallback of \"copy paste the cells into grid view\" worked. None of them work out of the gate. Upload from Excel requires \"Add an App\" to the sharepoint site. When you try this in Flankspeed, it says there are no Sharepoint Apps that you can add. Bummer. Export table to sharepoint list sounded promising, Excel can make connections to OneDrive, why not SharePoint? \"Cannot contact the server at this time. Your table cannot be published.\" Copy paste cells into grid view works, sorta . Tab characters (ASCII 09) split the contents into the next column, so your data does not paste in nicely. What can we do Well, there's really we can do about 1 or 2. Maybe somebody on the licensing side (I say that as if its a concrete thing or person, who knows), can fix that one day. What we can do is work with 3 and try to clean the CSV up before running the copy/paste into Sharepoint. We need to find and replace all tab characters (ASCII 09) with an empty string \"\". Excel has a find/replace but there is no good way to put in a tab character. You cannot copy/paste the tab character (they don't render in Excel). In my despair, I fell back on the reliable solution for finding and subsituting text, sed . sed, the tool you hate to love If you don't use *nix based OS's you might not have heard of sed. sed does many things, but one thing it does very well is text substitution. sed, or s tream ed itor, is a super powerful tool for editing/replacing text. The command uses a text pattern string to determine what to find/replace, and it is, admittably, rather arcane to the uninitiated. Don't worry though, the command to find and replace all tabs is fairly simple 's/\\t//g' the full command (if you had sed installed local) sed 's/\\t//g' file.csv sed is not installed on windows machines, however, there is a webapp that you can use to run sed . Open the CSV in a text editor. Copy all the text and paste it into the input labelled STDIN Copy and paste the string 's/\\t//g' into the input labelled Command Line. Paste the STDOUT text back into the text file and save as CSV. Reopen the CSV in excel. Copy all the cells On Sharepoint, select all columns in the new-item row Paste, all items should appear.","title":"Importing data from STAIRS exports"},{"location":"Importing%20Data/#importing-data-from-stairs-exports","text":"First off. Sorry, this is NOT going to be enjoyable. It would be cool if the \"Upload from Excel\" option from Sharepiont worked, or the \"Export Table to Sharepoint List\" option from Excel worked, or even the fallback of \"copy paste the cells into grid view\" worked. None of them work out of the gate. Upload from Excel requires \"Add an App\" to the sharepoint site. When you try this in Flankspeed, it says there are no Sharepoint Apps that you can add. Bummer. Export table to sharepoint list sounded promising, Excel can make connections to OneDrive, why not SharePoint? \"Cannot contact the server at this time. Your table cannot be published.\" Copy paste cells into grid view works, sorta . Tab characters (ASCII 09) split the contents into the next column, so your data does not paste in nicely.","title":"Importing data from STAIRS exports"},{"location":"Importing%20Data/#what-can-we-do","text":"Well, there's really we can do about 1 or 2. Maybe somebody on the licensing side (I say that as if its a concrete thing or person, who knows), can fix that one day. What we can do is work with 3 and try to clean the CSV up before running the copy/paste into Sharepoint. We need to find and replace all tab characters (ASCII 09) with an empty string \"\". Excel has a find/replace but there is no good way to put in a tab character. You cannot copy/paste the tab character (they don't render in Excel). In my despair, I fell back on the reliable solution for finding and subsituting text, sed .","title":"What can we do"},{"location":"Importing%20Data/#sed-the-tool-you-hate-to-love","text":"If you don't use *nix based OS's you might not have heard of sed. sed does many things, but one thing it does very well is text substitution. sed, or s tream ed itor, is a super powerful tool for editing/replacing text. The command uses a text pattern string to determine what to find/replace, and it is, admittably, rather arcane to the uninitiated. Don't worry though, the command to find and replace all tabs is fairly simple 's/\\t//g' the full command (if you had sed installed local) sed 's/\\t//g' file.csv sed is not installed on windows machines, however, there is a webapp that you can use to run sed . Open the CSV in a text editor. Copy all the text and paste it into the input labelled STDIN Copy and paste the string 's/\\t//g' into the input labelled Command Line. Paste the STDOUT text back into the text file and save as CSV. Reopen the CSV in excel. Copy all the cells On Sharepoint, select all columns in the new-item row Paste, all items should appear.","title":"sed, the tool you hate to love"},{"location":"Merging%20Data/","text":"Merging in new data It is expected that data will come from two types of locations: Internal to the Sharepoint list External to the Sharepoint list Internal data are records and fields that only exist within SharePoint. This could be tags (field) projects that do not live in any other database (records). External data are records that are imported from another database, such as STAIRS. This means we need to merge our datasets when an update comes in. A new data import from STAIRS will only affect the records that come from STAIRS, but should leave the other records untouched, and should preserve any additional fields added to the records being updated from SharePoint, even though those fields are not present in the imported data. I have not found a good solution for this problem with either excel or csv files. However, there is a simple one-line solution within JavaScript. If your existing list of records is called list and your import is called update then: list.filter(l => Object.assign(l,update.find(u => u.id==l.id)) ) will produce an array of merged objects, whose fields are the Union of list and update , letting the values of update overwrite those of list in any overlap, and preserving any fields from list not present in update . Enough of the teaser, how do I do that? JSONify the data First step is to JSONify the CSV data. csv2json is a handy webapp for doing just that. You paste in your CSV formatted text on one side, and a JSON object comes out the other side. You should expect that a CSV should look like an Array of Objects . Each Object in the Array is a record or row from the CSV. Each Object has fields corresponding to the column headers from the CSV. To get the current list, export the Sharepoint list to CSV and JSONify it. To get the update, it needs to be in a CSV compatible format, then JSONify it. How do I use JavaScript on NMCI??? So, NMCI in all its awesomeness has blocked the webpage developer tools, and the javascript console that comes with that. Luckily, there's a web app for everything. jsconsole provides you with a JavaScript console in a web browser and it'll do everything we need. let list = <paste JSON list here> let update = <paste JSON update here> let merged = list.filter(l => Object.assign(l,update.find(u => u.id==l.id)) ) For clarity, lets step through that. Line 1 and 2: let list = <paste JSON list here> let update = <paste JSON update here> will assign the Array defined in the JSON string to the variable list . Line 2 does the same, but for update . Line 3: let merged = list.filter(l => Object.assign(l,update.find(u => u.id==l.id)) ) There's a few things going on here, so I'm going to walk through this piece by piece, starting from the inside: update.find(u => u.id==l.id) Given an element of list l , and the Array update , this finds the element u that matches the id fields of the current element l . I'll refer to this as <matching u> from now on. Object.assign(l,<matching u>) This is where the let merged = list.filter(l => <condition>) This will filter the Array list to only cases where <condition> evaluates as true . Object.assign(l,update.find(u => u.id==l.id))","title":"Merging in new data"},{"location":"Merging%20Data/#merging-in-new-data","text":"It is expected that data will come from two types of locations: Internal to the Sharepoint list External to the Sharepoint list Internal data are records and fields that only exist within SharePoint. This could be tags (field) projects that do not live in any other database (records). External data are records that are imported from another database, such as STAIRS. This means we need to merge our datasets when an update comes in. A new data import from STAIRS will only affect the records that come from STAIRS, but should leave the other records untouched, and should preserve any additional fields added to the records being updated from SharePoint, even though those fields are not present in the imported data. I have not found a good solution for this problem with either excel or csv files. However, there is a simple one-line solution within JavaScript. If your existing list of records is called list and your import is called update then: list.filter(l => Object.assign(l,update.find(u => u.id==l.id)) ) will produce an array of merged objects, whose fields are the Union of list and update , letting the values of update overwrite those of list in any overlap, and preserving any fields from list not present in update .","title":"Merging in new data"},{"location":"Merging%20Data/#enough-of-the-teaser-how-do-i-do-that","text":"","title":"Enough of the teaser, how do I do that?"},{"location":"Merging%20Data/#jsonify-the-data","text":"First step is to JSONify the CSV data. csv2json is a handy webapp for doing just that. You paste in your CSV formatted text on one side, and a JSON object comes out the other side. You should expect that a CSV should look like an Array of Objects . Each Object in the Array is a record or row from the CSV. Each Object has fields corresponding to the column headers from the CSV. To get the current list, export the Sharepoint list to CSV and JSONify it. To get the update, it needs to be in a CSV compatible format, then JSONify it.","title":"JSONify the data"},{"location":"Merging%20Data/#how-do-i-use-javascript-on-nmci","text":"So, NMCI in all its awesomeness has blocked the webpage developer tools, and the javascript console that comes with that. Luckily, there's a web app for everything. jsconsole provides you with a JavaScript console in a web browser and it'll do everything we need. let list = <paste JSON list here> let update = <paste JSON update here> let merged = list.filter(l => Object.assign(l,update.find(u => u.id==l.id)) ) For clarity, lets step through that. Line 1 and 2: let list = <paste JSON list here> let update = <paste JSON update here> will assign the Array defined in the JSON string to the variable list . Line 2 does the same, but for update . Line 3: let merged = list.filter(l => Object.assign(l,update.find(u => u.id==l.id)) ) There's a few things going on here, so I'm going to walk through this piece by piece, starting from the inside: update.find(u => u.id==l.id) Given an element of list l , and the Array update , this finds the element u that matches the id fields of the current element l . I'll refer to this as <matching u> from now on. Object.assign(l,<matching u>) This is where the let merged = list.filter(l => <condition>) This will filter the Array list to only cases where <condition> evaluates as true . Object.assign(l,update.find(u => u.id==l.id))","title":"How do I use JavaScript on NMCI???"},{"location":"mkdocs/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. If you're using Docker: docker pull squidfunk/mkdocs-material docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material [Docs](http://localhost:8000) Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"mkdocs/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. If you're using Docker: docker pull squidfunk/mkdocs-material docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material build docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material [Docs](http://localhost:8000)","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/","text":"2022-05-10 AI Inventory Notes Attendees Jesse Nerius Alex Buck Projects vs People - Many to Many relationship Baseball card for people and projects Two Forms Intake form - new entry Update form - update entry, linked with periodic flow Two views 1) Overview 2) Detail view (auto-filter into ) Purposes Answer bigger data calls Provide a way to collaborate Provide a way to share knowledge Timeline However much time I can allocate? Discuss at Thursday Ellyson meeting. NPS Shura? Yep, there is a remote viewing session.","title":"2022-05-10 AI Inventory Notes"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/#2022-05-10-ai-inventory-notes","text":"","title":"2022-05-10 AI Inventory Notes"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/#attendees","text":"Jesse Nerius Alex Buck Projects vs People - Many to Many relationship Baseball card for people and projects","title":"Attendees"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/#two-forms","text":"Intake form - new entry Update form - update entry, linked with periodic flow","title":"Two Forms"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/#two-views","text":"1) Overview 2) Detail view (auto-filter into )","title":"Two views"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/#purposes","text":"Answer bigger data calls Provide a way to collaborate Provide a way to share knowledge","title":"Purposes"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/#timeline","text":"However much time I can allocate? Discuss at Thursday Ellyson meeting.","title":"Timeline"},{"location":"Meeting%20Notes/2022-05-10-AI_Inventory/#nps-shura","text":"Yep, there is a remote viewing session.","title":"NPS Shura?"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/","text":"2022-05-10 AI Inventory Notes Attendees Jesse Nerius Alex Buck Pete Wolt Kristy Sakano Objectives Does this (SharePoint) make sense? Does this meet the need? Pete Wolt: Before we go ahead, we should get this in front of the rest of the COI Advisory Group. \"I can't officially task the NAWC folks to do anything, because I'm NAVAIR\". Things to be careful of: We don't want to keep two sets of books. We should send them back to STAIRS (or the authoritative source). STAIRS ingests SBIR program management database (PMDB). PBDB is the authoritative source for STTR, SBIR. STAIRS is the authoritative source for NICE. Funding profile is loaded in STAIRS but maybe isn't fully updated. FNC (Future Naval Capabilities) - Tech program from ONR. STAIRS doesn't hold all projects. So we need something in SharePoint for those that don't have another home (e.g. Harbinger+Air). Kristy really liked the filtering that SharePoint lists can provide. It was a pretty intuitive interface. STAIRS can be pretty slow to use. Showing STAIRS You can \"Tag\" a list of projects and then view that list again later. Then you can share the \"tagged\" list with others. Tags are like categories of saved entries. Tags don't seem useful. to Jarvis - What time do you have available? I need to work out the update procedure. Who exports from STAIRS? Do we need other fields? Kristi - Keywords would be really useful as an extra field. Tasks Ingest of new projects (Forms?) Ingesting a CSV from STAIRS was problematic (issues with quotes making it really hard to just paste in. It was very manual.) How to merge two CSVs where one is a subset of the other? Edit button logic to post back to origin data source (if STAIRS, link to STAIRS via project ID) https://stairs.navair.navy.mil/projectOverview.aspx?id=<ID> Access to stairs (Pete Wolt said he'd work this.) Next Steps Present hybrid approach at next COI meeting, if able, otherwise Jesse will.","title":"2022-05-10 AI Inventory Notes"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/#2022-05-10-ai-inventory-notes","text":"","title":"2022-05-10 AI Inventory Notes"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/#attendees","text":"Jesse Nerius Alex Buck Pete Wolt Kristy Sakano","title":"Attendees"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/#objectives","text":"Does this (SharePoint) make sense? Does this meet the need? Pete Wolt: Before we go ahead, we should get this in front of the rest of the COI Advisory Group. \"I can't officially task the NAWC folks to do anything, because I'm NAVAIR\". Things to be careful of: We don't want to keep two sets of books. We should send them back to STAIRS (or the authoritative source). STAIRS ingests SBIR program management database (PMDB). PBDB is the authoritative source for STTR, SBIR. STAIRS is the authoritative source for NICE. Funding profile is loaded in STAIRS but maybe isn't fully updated. FNC (Future Naval Capabilities) - Tech program from ONR. STAIRS doesn't hold all projects. So we need something in SharePoint for those that don't have another home (e.g. Harbinger+Air). Kristy really liked the filtering that SharePoint lists can provide. It was a pretty intuitive interface. STAIRS can be pretty slow to use.","title":"Objectives"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/#showing-stairs","text":"You can \"Tag\" a list of projects and then view that list again later. Then you can share the \"tagged\" list with others. Tags are like categories of saved entries. Tags don't seem useful. to Jarvis - What time do you have available? I need to work out the update procedure. Who exports from STAIRS?","title":"Showing STAIRS"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/#do-we-need-other-fields","text":"Kristi - Keywords would be really useful as an extra field.","title":"Do we need other fields?"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/#tasks","text":"Ingest of new projects (Forms?) Ingesting a CSV from STAIRS was problematic (issues with quotes making it really hard to just paste in. It was very manual.) How to merge two CSVs where one is a subset of the other? Edit button logic to post back to origin data source (if STAIRS, link to STAIRS via project ID) https://stairs.navair.navy.mil/projectOverview.aspx?id=<ID> Access to stairs (Pete Wolt said he'd work this.)","title":"Tasks"},{"location":"Meeting%20Notes/2022-05-31-AI_Inventory/#next-steps","text":"Present hybrid approach at next COI meeting, if able, otherwise Jesse will.","title":"Next Steps"},{"location":"Working%20With%20SharePoint%20JSON/editing-workflow/","text":"JSON Editing Workflow Baseline JSON The general workflow to build the starter JSON goes as follows: Write HTML Write CSS Input HTML + CSS into formatter Iterate until you like the output appearance JSON Tweaks By default the tool builds column syntax JSON. We're concerned with building view syntax JSON entries. The output will start with the following: { \"$schema\": \"https://developer.microsoft.com/json-schemas/sp/v2/column-formatting.schema.json\", \"debugMode\": true, \"elmType\": \"div\", ... } You can see that this is the column syntax JSON based on the schema. What you need to do is take the output starting with \"elmType\": \"div\" ( Be careful to not grab the ending } from the top level of the output ) and add insert it into the following template: { \"$schema\": \"https://developer.microsoft.com/json-schemas/sp/v2/row-formatting.schema.json\", \"hideSelection\": true, \"hideColumnHeader\": true, \"rowFormatter\": { <INSERT HERE> }, } The result will look something like this: { \"$schema\": \"https://developer.microsoft.com/json-schemas/sp/view-formatting.schema.json\", \"hideSelection\": true, \"hideColumnHeader\": true, \"rowFormatter\": { \"elmType\": \"div\", \"style\": { \"display\": \"flex\", }, \"attributes\": { \"class\": \"ms-bgColor-white\" }, \"children\": [ <YOUR CHILDREN ELEMENTS HERE> ] } } The specifics the element style, attributes, and children are up to you and your formatting. You may also modify the hideSelection and hideColumnHeader properties as desired. Highly recommend getting the skeleton correct first There are a few items that you have to do after you get the skeleton. If you use JSON button elements, you will need to add the defaultRowAction property in manually. This is described in weird gotchas .","title":"JSON Editing Workflow"},{"location":"Working%20With%20SharePoint%20JSON/editing-workflow/#json-editing-workflow","text":"","title":"JSON Editing Workflow"},{"location":"Working%20With%20SharePoint%20JSON/editing-workflow/#baseline-json","text":"The general workflow to build the starter JSON goes as follows: Write HTML Write CSS Input HTML + CSS into formatter Iterate until you like the output appearance","title":"Baseline JSON"},{"location":"Working%20With%20SharePoint%20JSON/editing-workflow/#json-tweaks","text":"By default the tool builds column syntax JSON. We're concerned with building view syntax JSON entries. The output will start with the following: { \"$schema\": \"https://developer.microsoft.com/json-schemas/sp/v2/column-formatting.schema.json\", \"debugMode\": true, \"elmType\": \"div\", ... } You can see that this is the column syntax JSON based on the schema. What you need to do is take the output starting with \"elmType\": \"div\" ( Be careful to not grab the ending } from the top level of the output ) and add insert it into the following template: { \"$schema\": \"https://developer.microsoft.com/json-schemas/sp/v2/row-formatting.schema.json\", \"hideSelection\": true, \"hideColumnHeader\": true, \"rowFormatter\": { <INSERT HERE> }, } The result will look something like this: { \"$schema\": \"https://developer.microsoft.com/json-schemas/sp/view-formatting.schema.json\", \"hideSelection\": true, \"hideColumnHeader\": true, \"rowFormatter\": { \"elmType\": \"div\", \"style\": { \"display\": \"flex\", }, \"attributes\": { \"class\": \"ms-bgColor-white\" }, \"children\": [ <YOUR CHILDREN ELEMENTS HERE> ] } } The specifics the element style, attributes, and children are up to you and your formatting. You may also modify the hideSelection and hideColumnHeader properties as desired.","title":"JSON Tweaks"},{"location":"Working%20With%20SharePoint%20JSON/editing-workflow/#highly-recommend-getting-the-skeleton-correct-first","text":"There are a few items that you have to do after you get the skeleton. If you use JSON button elements, you will need to add the defaultRowAction property in manually. This is described in weird gotchas .","title":"Highly recommend getting the skeleton correct first"},{"location":"Working%20With%20SharePoint%20JSON/filter-to-single-item/","text":"How to filter a list to a single item via URL query string Filtering is accomplished by adding a query string to the URL. For this we will assume that <url> is a valid url to the list/view you want to filter. e.g. https://flankspeed.sharepoint-mil.us.mcas-gov.us/sites/navair_autonomy_and_ai_coi/Lists/AI%20Project%20Inventory/DefaultFormatted.aspx The format to use for applying a filter is: <url>?useFiltersInViewXml=1 FilterField1=<field-name>&FilterValue1=<field-value> e.g. https://flankspeed.sharepoint-mil.us.mcas-gov.us/sites/navair_autonomy_and_ai_coi/Lists/AI%20Project%20Inventory/DefaultFormatted.aspx?useFiltersInViewXml=1&FilterField1=ID&FilterValue1=1","title":"How to filter a list to a single item via URL query string"},{"location":"Working%20With%20SharePoint%20JSON/filter-to-single-item/#how-to-filter-a-list-to-a-single-item-via-url-query-string","text":"Filtering is accomplished by adding a query string to the URL. For this we will assume that <url> is a valid url to the list/view you want to filter. e.g. https://flankspeed.sharepoint-mil.us.mcas-gov.us/sites/navair_autonomy_and_ai_coi/Lists/AI%20Project%20Inventory/DefaultFormatted.aspx The format to use for applying a filter is: <url>?useFiltersInViewXml=1 FilterField1=<field-name>&FilterValue1=<field-value> e.g. https://flankspeed.sharepoint-mil.us.mcas-gov.us/sites/navair_autonomy_and_ai_coi/Lists/AI%20Project%20Inventory/DefaultFormatted.aspx?useFiltersInViewXml=1&FilterField1=ID&FilterValue1=1","title":"How to filter a list to a single item via URL query string"},{"location":"Working%20With%20SharePoint%20JSON/general-list-settings/","text":"General Settings for Lists To get to the general settings for a list Click the List View button in the ribbon Click the \"Edit current view\" button OR Click the gear icon in the top right Click the \"List Settings\" link in the slideout menu. General Settings This is where you can control all the settings for a list. You can adjust column definitions here, as well as view options. Hiding Title column Reference this resource https://www.enjoysharepoint.com/remove-sharepoint-online-title-column/ . In short, go to Settings > Advanced Settings > \"Allow management of content types?\" and set it to \"Yes\". Then go back to Settings. There is a new section called \"Content Type\". Click the text Item . Then click the Title entry on the new page. This will finally load a page that has an option called \"Column Settings\" where one option is \"Hidden (Will not appear in forms)\". Select this and press \"OK\". Once you have done this, go back to Settings > Advanced Settings > \"Allow management of content types?\" and set it to \"No\". If you do not, there is a \"Content Type\" field that now will show up on forms. Lovely. Multi-line Text and \"Rich Text Fields\" Don't use Rich Text Fields. Just don't. If you use \"rich text\" fields, when you get the contents of the field you get a bunch of HTML tags that do not render, but instead just print out raw. Multi-line Description: <div>Rich text field contents</div> Looks bad.","title":"General Settings for Lists"},{"location":"Working%20With%20SharePoint%20JSON/general-list-settings/#general-settings-for-lists","text":"To get to the general settings for a list Click the List View button in the ribbon Click the \"Edit current view\" button OR Click the gear icon in the top right Click the \"List Settings\" link in the slideout menu.","title":"General Settings for Lists"},{"location":"Working%20With%20SharePoint%20JSON/general-list-settings/#general-settings","text":"This is where you can control all the settings for a list. You can adjust column definitions here, as well as view options.","title":"General Settings"},{"location":"Working%20With%20SharePoint%20JSON/general-list-settings/#hiding-title-column","text":"Reference this resource https://www.enjoysharepoint.com/remove-sharepoint-online-title-column/ . In short, go to Settings > Advanced Settings > \"Allow management of content types?\" and set it to \"Yes\". Then go back to Settings. There is a new section called \"Content Type\". Click the text Item . Then click the Title entry on the new page. This will finally load a page that has an option called \"Column Settings\" where one option is \"Hidden (Will not appear in forms)\". Select this and press \"OK\". Once you have done this, go back to Settings > Advanced Settings > \"Allow management of content types?\" and set it to \"No\". If you do not, there is a \"Content Type\" field that now will show up on forms. Lovely.","title":"Hiding Title column"},{"location":"Working%20With%20SharePoint%20JSON/general-list-settings/#multi-line-text-and-rich-text-fields","text":"Don't use Rich Text Fields. Just don't. If you use \"rich text\" fields, when you get the contents of the field you get a bunch of HTML tags that do not render, but instead just print out raw. Multi-line Description: <div>Rich text field contents</div> Looks bad.","title":"Multi-line Text and \"Rich Text Fields\""},{"location":"Working%20With%20SharePoint%20JSON/weird-gotchas/","text":"Weird Gotchas Lists have two filters The first is visable in the list/gallery view. If you click a header you can filter on that column. The second is only found when looking at the back end. You have to: Click on the view selection drop-down Select \"Edit current view\" The page that loads should have a heading of \"Settings > Edit View\" Scroll down to the \"Filter\" section, and modify/remove the filter as needed. This one was found by inadvertently toggling the second filter method. The list would only show a single entry, no matter what I did. I was only able to resolve this when I found this second filter method. I switched it back to \"Show all items in this view.\" Field names lie to you Yep. SharePoint lies to you. Don't act suprised. JSON must use the Internal Field Name . This is NEVER updated after the column is created. If you create the columen and call it \"Jobs\" but decide you would rather call it \"Desired Occupation\" the internal field name will still be \"Jobs\". There is not an easy way to find the internal field name of a column, go figure. The best way is the following: Click on the gear icon in the top right corner. Click on List settings . Scroll to the \"Columns\" section. Click on the column you want to check. The internal field name is at the end of the URL in the address bar. It will say List=<long string>&Field=<internal field name> You can the use the internal field name in JSON formatting as such: \"=[$<internal field name>]\" . If your fieldname is: Desired_x0020_Occupation you would use: \"=[$Desired_x0020_Occupation]\" to refer to that field in JSON formatting. If you wanted the output to read: Desired Occupation: <desired occupation> you would use: \"='Desired Occupation: '+[$Desired_x0020_Occupation]\" for the txtContent attribute of the element. If you use the SharePoint Buttons read this! If you use a SharePoint button to access things like the edit element panel (the slideout panel for editing an entry), then you need to do some manual additions to the JSON output from the formatter tool. The JSON button element needs an attribute called customRowAction . This is not an HTML attribute, but a SharePoint attribute. This means you cannot specify this via HTML+CSS, and it will not populate into the JSON output. You must add it manually. Great! So much fun! Manual additions to automated workflows are the best! \"customRowAction\": { \"action\": \"defaultClick\" }, Reference the syntax docs for the list of possible action values. The defaultClick action will open the edit panel, which suffices for us.","title":"Weird Gotchas"},{"location":"Working%20With%20SharePoint%20JSON/weird-gotchas/#weird-gotchas","text":"","title":"Weird Gotchas"},{"location":"Working%20With%20SharePoint%20JSON/weird-gotchas/#lists-have-two-filters","text":"The first is visable in the list/gallery view. If you click a header you can filter on that column. The second is only found when looking at the back end. You have to: Click on the view selection drop-down Select \"Edit current view\" The page that loads should have a heading of \"Settings > Edit View\" Scroll down to the \"Filter\" section, and modify/remove the filter as needed. This one was found by inadvertently toggling the second filter method. The list would only show a single entry, no matter what I did. I was only able to resolve this when I found this second filter method. I switched it back to \"Show all items in this view.\"","title":"Lists have two filters"},{"location":"Working%20With%20SharePoint%20JSON/weird-gotchas/#field-names-lie-to-you","text":"Yep. SharePoint lies to you. Don't act suprised. JSON must use the Internal Field Name . This is NEVER updated after the column is created. If you create the columen and call it \"Jobs\" but decide you would rather call it \"Desired Occupation\" the internal field name will still be \"Jobs\". There is not an easy way to find the internal field name of a column, go figure. The best way is the following: Click on the gear icon in the top right corner. Click on List settings . Scroll to the \"Columns\" section. Click on the column you want to check. The internal field name is at the end of the URL in the address bar. It will say List=<long string>&Field=<internal field name> You can the use the internal field name in JSON formatting as such: \"=[$<internal field name>]\" . If your fieldname is: Desired_x0020_Occupation you would use: \"=[$Desired_x0020_Occupation]\" to refer to that field in JSON formatting. If you wanted the output to read: Desired Occupation: <desired occupation> you would use: \"='Desired Occupation: '+[$Desired_x0020_Occupation]\" for the txtContent attribute of the element.","title":"Field names lie to you"},{"location":"Working%20With%20SharePoint%20JSON/weird-gotchas/#if-you-use-the-sharepoint-buttons-read-this","text":"If you use a SharePoint button to access things like the edit element panel (the slideout panel for editing an entry), then you need to do some manual additions to the JSON output from the formatter tool. The JSON button element needs an attribute called customRowAction . This is not an HTML attribute, but a SharePoint attribute. This means you cannot specify this via HTML+CSS, and it will not populate into the JSON output. You must add it manually. Great! So much fun! Manual additions to automated workflows are the best! \"customRowAction\": { \"action\": \"defaultClick\" }, Reference the syntax docs for the list of possible action values. The defaultClick action will open the edit panel, which suffices for us.","title":"If you use the SharePoint Buttons read this!"},{"location":"views/default.css/","text":".outer { margin: 1em; padding: 1em; border: 1px solid #ccc; background-color: #eee; display: block; box-shadow: 1px 1px 2px black; border-radius: 5px; } .title { font-size: 1.2em; text-align: left; font-weight: bold; } .poc { font-size: 1.2em; } .emphasis { font-style: italic; } .label { color: #333; font-weight: 100; } .clear { clear: both; } .start { float: left } .end { float: right } a { color: teal; } .btn { -webkit-appearance: button; -moz-appearance: button; appearance: button; color: initial; display: inline-block; padding: .5em; margin-top: 1em; border: 1px solid #111; border-radius: 3px; cursor: pointer; background-color: #004E8C; color: #fff; box-shadow: 1px 1px 2px black; } .sp-btn { border: 0; font-size: 1em; }","title":"Default.css"},{"location":"views/default.html/","text":"<div class=\"outer\"> <div class=\"title\"> =[$Title] </div> <div class=\"objective\"> <div class=\"label\">=if([$ProjectObjective],'Project Objective:','')</div> <div> =[$ProjectObjective] </div> </div> <div class=\"poc\"> <span class=\"label\">Point of Contact: </span><a href=\"='mailto:'+[$Email]\">=[$Point_x0020_of_x0020_Contact_x00]</a> </div> <div class=\"poc\"> <span class=\"label\">=if([$SecondaryPOCName],'Secondary Point of Contact: ','')</span><a href=\"='mailto:'+[$SecondaryPOCEmail]\">=[$SecondaryPOCName]</a> </div> <div class=\"status\"> <span class=\"label\">=if([$ProjectStatus],'Project Status: ','')</span><span class=\"emphasis\">=[$ProjectStatus]</span> </div> <div class=\"start\"> <span class=\"label\">=if([$StartDate],'Project Start: ','')</span><span class=\"emphasis\">=toLocaleDateString([$StartDate])</span> </div> <div class=\"end\"> <span class=\"label\">=if([$EndDate],'Project End: ','')</span><span class=\"emphasis\">=toLocaleDateString([$EndDate])</span> </div> <div class=\"sponsor clear\"> <span class=\"label\">=if([$PrimaryPMA],'Primary PMA: ','')</span><span class=\"emphasis\">=[$PrimaryPMA]</span> </div> <a href=\"='https://flankspeed.sharepoint-mil.us.mcas-gov.us/sites/navair_autonomy_and_ai_coi/Lists/AI%20Project%20Inventory/DetailView.aspx?useFiltersInViewXml=1&FilterField1=ID&FilterValue1='+[$ID]\"> <div class=\"btn\"> View Project </div> </a> <button class=\"sp-btn\"> <div class=\"btn\"> Edit Project </div> </button> </div>","title":"Default.html"},{"location":"views/default.json/","text":"{ \"$schema\": \"https://developer.microsoft.com/json-schemas/sp/view-formatting.schema.json\", \"hideSelection\": true, \"hideColumnHeader\": true, \"rowFormatter\": { \"elmType\": \"div\", \"attributes\": { \"class\": \"outer\" }, \"style\": { \"margin\": \"1em\", \"padding\": \"1em\", \"border\": \"1px solid #ccc\", \"background-color\": \"#eee\", \"display\": \"block\", \"box-shadow\": \"1px 1px 2px black\", \"border-radius\": \"5px\" }, \"children\": [ { \"elmType\": \"div\", \"attributes\": { \"class\": \"title\" }, \"style\": { \"font-size\": \"1.2em\", \"text-align\": \"left\", \"font-weight\": \"bold\" }, \"txtContent\": \"=[$Title] \" }, { \"elmType\": \"div\", \"attributes\": { \"class\": \"objective\" }, \"children\": [ { \"elmType\": \"div\", \"attributes\": { \"class\": \"label\" }, \"style\": { \"color\": \"#333\", \"font-weight\": \"100\" }, \"txtContent\": \"=if([$ProjectObjective],'Project Objective:','')\" }, { \"elmType\": \"div\", \"txtContent\": \"=[$ProjectObjective] \" } ] }, { \"elmType\": \"div\", \"attributes\": { \"class\": \"poc\" }, \"style\": { \"font-size\": \"1.2em\" }, \"children\": [ { \"elmType\": \"span\", \"attributes\": { \"class\": \"label\" }, \"style\": { \"color\": \"#333\", \"font-weight\": \"100\" }, \"txtContent\": \"Point of Contact: \" }, { \"elmType\": \"a\", \"attributes\": { \"href\": \"='mailto:'+[$Email]\" }, \"style\": { \"color\": \"teal\" }, \"txtContent\": \"=[$Point_x0020_of_x0020_Contact_x00]\" } ] }, { \"elmType\": \"div\", \"attributes\": { \"class\": \"poc\" }, \"style\": { \"font-size\": \"1.2em\" }, \"children\": [ { \"elmType\": \"span\", \"attributes\": { \"class\": \"label\" }, \"style\": { \"color\": \"#333\", \"font-weight\": \"100\" }, \"txtContent\": \"=if([$SecondaryPOCName],'Secondary Point of Contact: ','')\" }, { \"elmType\": \"a\", \"attributes\": { \"href\": \"='mailto:'+[$SecondaryPOCEmail]\" }, \"style\": { \"color\": \"teal\" }, \"txtContent\": \"=[$SecondaryPOCName]\" } ] }, { \"elmType\": \"div\", \"attributes\": { \"class\": \"status\" }, \"children\": [ { \"elmType\": \"span\", \"attributes\": { \"class\": \"label\" }, \"style\": { \"color\": \"#333\", \"font-weight\": \"100\" }, \"txtContent\": \"=if([$ProjectStatus],'Project Status: ','')\" }, { \"elmType\": \"span\", \"attributes\": { \"class\": \"emphasis\" }, \"style\": { \"font-style\": \"italic\" }, \"txtContent\": \"=[$ProjectStatus]\" } ] }, { \"elmType\": \"div\", \"attributes\": { \"class\": \"start\" }, \"style\": { \"float\": \"left\" }, \"children\": [ { \"elmType\": \"span\", \"attributes\": { \"class\": \"label\" }, \"style\": { \"color\": \"#333\", \"font-weight\": \"100\" }, \"txtContent\": \"=if([$StartDate],'Project Start: ','')\" }, { \"elmType\": \"span\", \"attributes\": { \"class\": \"emphasis\" }, \"style\": { \"font-style\": \"italic\" }, \"txtContent\": \"=toLocaleDateString([$StartDate])\" } ] }, { \"elmType\": \"div\", \"attributes\": { \"class\": \"end\" }, \"style\": { \"float\": \"right\" }, \"children\": [ { \"elmType\": \"span\", \"attributes\": { \"class\": \"label\" }, \"style\": { \"color\": \"#333\", \"font-weight\": \"100\" }, \"txtContent\": \"=if([$EndDate],'Project End: ','')\" }, { \"elmType\": \"span\", \"attributes\": { \"class\": \"emphasis\" }, \"style\": { \"font-style\": \"italic\" }, \"txtContent\": \"=toLocaleDateString([$EndDate])\" } ] }, { \"elmType\": \"div\", \"attributes\": { \"class\": \"sponsor clear\" }, \"style\": { \"clear\": \"both\" }, \"children\": [ { \"elmType\": \"span\", \"attributes\": { \"class\": \"label\" }, \"style\": { \"color\": \"#333\", \"font-weight\": \"100\" }, \"txtContent\": \"=if([$PrimaryPMA],'Primary PMA: ','')\" }, { \"elmType\": \"span\", \"attributes\": { \"class\": \"emphasis\" }, \"style\": { \"font-style\": \"italic\" }, \"txtContent\": \"=[$PrimaryPMA]\" } ] }, { \"elmType\": \"a\", \"attributes\": { \"href\": \"='https://flankspeed.sharepoint-mil.us.mcas-gov.us/sites/navair_autonomy_and_ai_coi/Lists/AI%20Project%20Inventory/DetailView.aspx?useFiltersInViewXml=1&FilterField1=ID&FilterValue1='+[$ID]\" }, \"style\": { \"color\": \"teal\" }, \"children\": [ { \"elmType\": \"div\", \"attributes\": { \"class\": \"btn\" }, \"style\": { \"-webkit-appearance\": \"button\", \"-moz-appearance\": \"button\", \"appearance\": \"button\", \"color\": \"#fff\", \"display\": \"inline-block\", \"padding\": \".5em\", \"margin-top\": \"1em\", \"border\": \"1px solid #111\", \"border-radius\": \"3px\", \"cursor\": \"pointer\", \"background-color\": \"#004E8C\", \"box-shadow\": \"1px 1px 2px black\" }, \"txtContent\": \" View Project \" } ] }, { \"elmType\": \"button\", \"attributes\": { \"class\": \"sp-btn\" }, \"customRowAction\": { \"action\": \"defaultClick\" }, \"style\": { \"border\": \"0\", \"font-size\": \"1em\" }, \"children\": [ { \"elmType\": \"div\", \"attributes\": { \"class\": \"btn\" }, \"style\": { \"-webkit-appearance\": \"button\", \"-moz-appearance\": \"button\", \"appearance\": \"button\", \"color\": \"#fff\", \"display\": \"inline-block\", \"padding\": \".5em\", \"margin-top\": \"1em\", \"border\": \"1px solid #111\", \"border-radius\": \"3px\", \"cursor\": \"pointer\", \"background-color\": \"#004E8C\", \"box-shadow\": \"1px 1px 2px black\" }, \"txtContent\": \" Edit Project \" } ] } ] } }","title":"Default.json"}]}